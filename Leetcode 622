class MyCircularQueue {
   vector<int> arr;
        int front;
        int rear;
        int size;
public:
        
    MyCircularQueue(int k) : front(-1), rear(-1), size(k), arr(vector<int>(k)) {}
    
    bool enQueue(int value)
     {
        if(isFull())
        {
            return false;
        }
        
        rear=(rear+1)%size;
        arr[rear]=value;
        if(front==-1)
        front=0;
       
        return true;

    }
    
    bool deQueue() 
    {
        if(isEmpty())
        {
            return false;
        }
        if(front==rear)
        {
            front=-1;
            rear=-1;
            return true;
        }
        
        front=(front+1)%size;
        return true;
    }
    
    int Front()
     {
    
        return  (isEmpty())?-1:arr[front];
    }
    
    int Rear() 
    {

        return  (isEmpty())?-1:arr[rear];
        
    }
    
    bool isEmpty()
     {

        if(front==-1 and rear ==-1)
        return true;
        else
        return false;
        
    }
    
    bool isFull()
     {
        if((front==0 and rear==size-1) or((rear+1)%size==front))
        return true;

        return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
